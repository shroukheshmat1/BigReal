#include <iostream>
#include <deque>
#include <regex>

using namespace std;

class BigDecimalInt{
private:
    string number;
    char signNumber;
    bool checkValidInput(string input);

public:
    bool operator < (const BigDecimalInt& anotherDec);
    bool operator > (const BigDecimalInt& anotherDec);
    bool operator == (const BigDecimalInt anotherDec);
    BigDecimalInt& operator = (BigDecimalInt anotherDec);
    BigDecimalInt operator + (BigDecimalInt number2);
    BigDecimalInt operator - (BigDecimalInt anotherDec);
    friend ostream &operator << (ostream &out, BigDecimalInt num);
    int size();
    int sign();
    void setNumber(string num);
    string getNumber(){
        return number;
    }

    BigDecimalInt(){}
    BigDecimalInt(string num)
    {
        setNumber(num);
    }

};

// regex function that checks the validation of the input.
bool BigDecimalInt :: checkValidInput(string input)
{
    regex validInput("[-+]?[0-9]+");
    return regex_match(input, validInput);
}

// constructor that takes a string as an input.
void BigDecimalInt :: setNumber(string num)
{
    bool validNumber = checkValidInput(num);
    if(validNumber)
    {
        number = num;
        if(number[0] == '+')
        {
            number.erase(0,1);
            signNumber = '+';
        }
        else if (number[0] == '-')
        {
            number.erase(0,1);
            signNumber = '-';
        }
        else
        {
            signNumber = '+';
        }
    }
    else
    {
        cout << "Invalid" << "\n";
        exit(1);
    }
}

// operator < overloading function.
bool BigDecimalInt :: operator < (const BigDecimalInt& anotherDec)
{
    string comp1 = "", comp2 = "";
    long long len1 = number.length(), len2 = anotherDec.number.length();

    while (len1 < len2){
        comp1 += '0';
        len1++;
    }
    while (len2 < len1){
        comp2 += '0';
        len2++;
    }
    comp1 += number;
    comp2 += anotherDec.number;

    if(signNumber == '-' && anotherDec.signNumber == '+')
    {
        return true;
    }
    else if(signNumber == '+' && anotherDec.signNumber == '-')
    {
        return false;
    }
    else if(signNumber == '+' && anotherDec.signNumber == '+')
    {
        return comp1 < comp2;
    }
    else
    {
        return comp1 > comp2;
    }
}

// operator > overloading function.
bool BigDecimalInt :: operator > (const BigDecimalInt &anotherDec)
{
    string comp1 = "", comp2 = "";
    long long len1 = number.length(), len2 = anotherDec.number.length();

    while (len1 < len2){
        comp1 += '0';
        len1++;
    }
    while (len2 < len1){
        comp2 += '0';
        len2++;
    }
    comp1 += number;
    comp2 += anotherDec.number;

    if(signNumber == '-' && anotherDec.signNumber == '+')
    {
        return false;
    }
    else if(signNumber == '+' && anotherDec.signNumber == '-')
    {
        return true;
    }
    else if(signNumber == '+' && anotherDec.signNumber == '+')
    {
        return comp1 > comp2;
    }
    else
    {
        return comp1 < comp2;
    }
}

// operator == overloading function.
bool BigDecimalInt :: operator == (const BigDecimalInt anotherDec)
{
    if (signNumber == anotherDec.signNumber && number == anotherDec.number)
    {
        return true;

    }
    else
    {
        return false;
    }
}

// operator = overloading function.
BigDecimalInt& BigDecimalInt :: operator = (BigDecimalInt anotherDec)
{
    signNumber = anotherDec.signNumber;
    number = anotherDec.number;
    return *this;
}

//addition implementation.
string addition(string num1,string num2)
{
    auto it1 = num1.rbegin();
    auto it2 = num2.rbegin();
    string res = "";
    int carry = 0;
    while (it1 != num1.rend())
    {
        int twoDigitsSum;
        carry = 0;
        twoDigitsSum = ((*it1 - '0') + (*it2 - '0'));
        if (twoDigitsSum >= 10)
        {
            carry = 1;
        }
        res = char((twoDigitsSum % 10) + '0') + res;
        *(it1 + 1) = char(((*(it1 + 1) - '0') + carry) + '0');
        it1++;
        it2++;
    }
    if (carry)
    {
        res = char((carry) + '0') + res;
    }
    return res;
}

//subtraction implementation
string subtraction(string num1,string num2){
    deque<long long>d;
    string res;

    for (long long i = num1.length() - 1; i >= 0; i--)
    {
        if (num1[i] < num2[i])
        {
            num1[i] = char (((num1[i] - '0') + 10) + '0');
            num1[i - 1] = char (((num1[i - 1] - '0') - 1) + '0');
            d.push_front((num1[i] - '0') - (num2[i] - '0'));
        }
        else
        {
            d.push_front((num1[i] - '0') - (num2[i] - '0'));
        }
    }

    for (auto i : d)
    {
        res += to_string(i);
    }
    return res;
}

// // operator + overloading function.
BigDecimalInt BigDecimalInt :: operator + (BigDecimalInt number2)
{
    BigDecimalInt result;
    char signNumber1 = signNumber, signNumber2 = number2.signNumber;
    string num1 = number, num2 = number2.number;
    BigDecimalInt number1 = *this;

    while (num1.length() < num2.length()){
        num1 = '0' + num1;
    }
    while (num2.length() < num1.length()){
        num2 = '0' + num2;
    }

    if (signNumber1 == signNumber2){
        result.signNumber = signNumber1;
        result.number = addition(num1,num2);

    }else{

        if(number1.signNumber == '-')
        {
            number1.signNumber = '+';
            result = (number2 - number1);
        }
        else{
            number2.signNumber = '+';
            result = (number1 - number2);
        }
    }
    return result;
}

// operator - overloading function.
BigDecimalInt BigDecimalInt :: operator - (BigDecimalInt anotherDec)
{
    BigDecimalInt obj;
    deque<long long> d;
    string strmin = "", res = "";
    string num1 = number, num2 = anotherDec.number;
    char sign1 = signNumber, sign2 = anotherDec.signNumber;

    if (number.length() > anotherDec.number.length())
    {
        for (long long i = 0; i < number.length() - anotherDec.number.length(); i++)
        {
            strmin += '0';
        }
        strmin += anotherDec.number;
        num2 = strmin;
    }
    else if (number.length() < anotherDec.number.length())
    {
        for (long long i = 0; i < anotherDec.number.length() - number.length(); i++)
        {
            strmin += '0';
        }
        strmin += number;
        num1 = strmin;
    }

    bool ok = false, is_determined = false;
    if (num1 < num2)
    {
        swap(num1, num2);
        swap(sign1, sign2);
        ok = true;
    }

    if (sign1 == sign2 )
    {
        res = subtraction(num1,num2);

        if(sign1=='-')ok = !ok;
    }
    else
    {
        res = addition(num1,num2);
        if(signNumber == '-')
        {
            obj.signNumber = '-';
            is_determined = true;
        }
        else
        {
            obj.signNumber = '+';
            is_determined = true;
        }

    }

    bool right = false;
    for (long long i = 0; i < res.length(); i++)
    {
        if (res[i] != '-' && res[i] != '0')
        {
            right = true;
        }
        if (!right && res[i] == '0')
        {
            res.erase(i, 1);
            i--;
        }
    }

    if(res.empty()) res = "0";
    if (!is_determined && (ok))
    {
        obj.signNumber = '-';
    }
    else if(!is_determined)
    {
        obj.signNumber = '+';
    }

    obj.number = res;
    return obj;
}

// function to return the size of number.
int BigDecimalInt :: size()
{
    return number.size();
}

// function returns the sign.
int BigDecimalInt :: sign()
{
    if (signNumber == '+')
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

// operator << overloading function.
ostream &operator << (ostream &out, BigDecimalInt num)
{
    if(num.signNumber == '+')
    {
        out << num.number ;
    }
    else
    {
        if(num.number == "0")
        {
            out << num.number ;
        }
        else
        {
            out << num.signNumber << num.number ;
        }
    }
    return out;
}




class BigReal{

private:
    BigDecimalInt beforePoint;
    BigDecimalInt AfterPoint;
    int position;
    char sign;
public:
    BigDecimalInt getAfterPoint()
    {
        return AfterPoint;
    }

    void setAfterPoint(const BigDecimalInt &afterPoint) {
        AfterPoint = afterPoint;
    }

    BigDecimalInt getBeforePoint() {
        return beforePoint;
    }

    void setBeforePoint(const BigDecimalInt &beforePoint)
    {
        BigReal::beforePoint = beforePoint;
    }
    BigReal (double realNumber = 0.0)
    {};// Default constructor
    friend ostream& operator << (ostream& out, BigReal num);
    friend istream& operator >> (istream& out, BigReal num);
    BigReal (string realNumber)
    {
        if( ValidInput(realNumber))
        {
            position=realNumber.find('.');
            string s1,s2;
            s1=realNumber.substr(0,position);
            s2=realNumber.substr(position+1,realNumber.length());
            BigDecimalInt before(s1);
            beforePoint=before;
            BigDecimalInt After(s2);
            AfterPoint=After;
            sign=beforePoint.sign();
        }

    };
    bool ValidInput(string input)
    {
        regex validInput("[-+]?[0-9]*\\.[0-9]*");
        return regex_match(input, validInput);
    }
    BigReal (BigDecimalInt bigInteger){
        beforePoint=bigInteger;
        position=bigInteger.getNumber().length();
        BigDecimalInt AfterPoint("0");
    }
    BigReal (const BigReal& other){

    }
    BigReal& operator= (BigReal other){
        sign= other.sign;
        position=other.position;
        beforePoint=other.beforePoint;
        AfterPoint=other.AfterPoint;
        return *this;


    } // Assignment operator
    BigReal operator+ (BigReal& other){
        BigReal result;
        //BigDecimalInt sum1,sum2;
        int maxlen;
        int len1=AfterPoint.getNumber().length();
        int len2=other.AfterPoint.getNumber().length();
        int diff=len1-len2;
        if(diff<0){//len2 is greater
            diff=-diff;
            maxlen=len2;
            for(int i=0;i<diff;i++){
                AfterPoint.getNumber().push_back('0');
            }
        }
        else if(diff>0){
            maxlen =len1;
            for(int i=0;i<diff;i++) {
                other.AfterPoint.getNumber().push_back('0');
            }
        }
        result.beforePoint=beforePoint+other.beforePoint;
        result.AfterPoint=AfterPoint+other.AfterPoint;
        if(result.AfterPoint.getNumber().length()>maxlen){
            result.AfterPoint.getNumber().erase(0,1);
            BigDecimalInt carry("1");
            result.beforePoint=result.beforePoint+carry;
            result.position = result.beforePoint.getNumber().length();
        }
        cout << result.beforePoint.getNumber() << '.' << result.AfterPoint.getNumber() <<endl;
        return result;

    }
    BigReal operator- (BigReal& other){

    }



//less than comparison
    bool operator< (const BigReal& anotherReal)
    {
        bool check1=beforePoint<anotherReal.beforePoint;
            if (check1==1)
                return 1;
            else
            {
                if (beforePoint==anotherReal.beforePoint)
                {
                    bool check3=AfterPoint<anotherReal.AfterPoint;
                    if (check3==1)
                        return 1;
                    else
                        return 0;
                }
                else
                {
                    return 0;
                }
            }
    }


//greater than comparison
    bool operator> (const BigReal &anotherReal)
    {
        bool check1=beforePoint>anotherReal.beforePoint;
        if (check1==1)
            return 1;
        else
        {
            if (beforePoint==anotherReal.beforePoint)
            {
                bool check3=AfterPoint>anotherReal.AfterPoint;
                if (check3==1)
                    return 1;
                else
                    return 0;
            }
            else
            {
                return 0;
            }
        }
    };



//equality operator
    bool operator== (const BigReal &anotherReal)
    {
        bool check1=beforePoint==anotherReal.beforePoint;
        if (check1==1)
        {
            bool check2=AfterPoint==anotherReal.AfterPoint;
            if (check2==1)
                return 1;
            else
                return 0;
        }
        else
            return 0;
    };
    int size()
    {
        int mysz=beforePoint.size()+AfterPoint.size();
        return mysz;

    };
    int Sign()
    {
        int s=beforePoint.sign();
    };
};
ostream& operator << (ostream& out, BigReal num)
{
    out<<num.beforePoint.getNumber()<<"."<<num.AfterPoint.getNumber()<<endl;
    return out;
};
istream& operator >> (istream& out, BigReal num)
{
    out>>num.beforePoint.getNumber()>>num.AfterPoint.getNumber();
    return out;
};
int main()
{
    //BigReal obj,obj2;
//    BigReal result;
//    BigReal obj("0.93");
//    BigReal obj2("0.536");
//    //obj=obj2;
//    //result=obj+obj2;
//    cout<<result.getBeforePoint().getNumber()<<"."<<result.getAfterPoint().getNumber()<<endl;
//
//


//----------------------------------------------------------------------------------------------------------------------
    string no1,no2,my_signed_num,size_number,no11,no22,eq1,eq2;

//    cout<<"please enter the 2 numbers you want operate on them the less than operation"<<endl;
//    cin>>no11>>no22;
//    BigReal number11(no11);
//    BigReal mynumm(no22);
//    bool anss = number11<mynumm;
//    if (anss==1)
//        cout<<no11<<" is less than "<<no22<<endl;
//    else if (anss==0)
//        cout<<no22<<" is less than "<<no11<<endl;



//    cout<<"please enter the 2 numbers you want operate on them the greater than operation"<<endl;
//    cin>>no1>>no2;
//    BigReal number1(no1);
//    BigReal mynum(no2);
//    bool ans = number1>mynum;
//    if (ans==1)
//        cout<<no1<<" is greater than "<<no2<<endl;
//    else if (ans==0)
//        cout<<no2<<" is greater than "<<no1<<endl;



//    cout<<"please enter the 2 numbers you want make sure of their equality"<<endl;
//    cin>>eq1>>eq2;
//    BigReal number1(eq1);
//    BigReal mynum(eq2);
//    bool equality= eq1==eq2;
//    if (equality==1)
//        cout<<eq1<<" is equals to "<<eq2<<endl;
//    else
//        cout<<eq1<<" isn't equals to "<<eq2<<endl;


//    cout<<"please enter the number you want to know its size"<<endl;
//    cin>>size_number;
//    BigReal number1(size_number);
//    int mysz=number1.size();
//    cout<<mysz<<endl;


//    cout<<"please enter the number you want to know its sign"<<endl;
//    cin>>my_signed_num;
//    BigReal number1(my_signed_num);
//    int mysign=number1.Sign();
//    if (mysign==1)
//        cout<<'+'<<endl;
//    else
//        cout<<'-'<<endl;
}
